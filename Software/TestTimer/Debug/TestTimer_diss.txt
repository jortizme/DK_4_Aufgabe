
TestTimer.elf:     file format elf32-tradlittlemips

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000710  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00000000 l       .text	00000000 _RESET_Vector
00000050 l       .text	00000000 _RESET_Handler
00000010 l       .text	00000000 _IP0_Vector
00000070 l       .text	00000000 _IP0_Handler
00000020 l       .text	00000000 _IP2_Vector
00000090 l       .text	00000000 _IP2_Handler
00000030 l       .text	00000000 _IP3_Vector
000000b0 l       .text	00000000 _IP3_Handler
00000040 l       .text	00000000 _IP4_Vector
000000d0 l       .text	00000000 _IP4_Handler
000000f0 l       .text	00000000 _save_regs
00000138 l       .text	00000000 _restore_regs
000001cc g     F .text	00000030 in32
000004c0 g     F .text	00000070 IP3_Handler
00000590 g     F .text	00000094 memcpy
000003e0 g     F .text	00000094 _mtc0
000001fc  w    F .text	00000024 IP0_Handler
0000028c g     F .text	00000060 cpu_enable_interrupt
00000268  w    F .text	00000024 IP4_Handler
000002ec g     F .text	00000068 cpu_disable_interrupt
00000474  w    F .text	00000028 outbyte
00000188 g     O .text	00000000 _di
00000190 g     F .text	0000003c out32
00000624 g     F .text	0000007c memset
00000530 g     F .text	00000060 main
000006a0 g     F .text	00000070 _premain
0000049c  w    F .text	00000024 inbyte
00000220  w    F .text	00000024 IP2_Handler
00000180 g     O .text	00000000 _ei
00000354 g     F .text	0000008c _mfc0



Disassembly of section .text:

00000000 <_RESET_Vector>:
   0:	10000013 	b	50 <_RESET_Handler>
   4:	00000000 	nop
	...

00000010 <_IP0_Vector>:
  10:	10000017 	b	70 <_IP0_Handler>
  14:	00000000 	nop
	...

00000020 <_IP2_Vector>:
  20:	1000001b 	b	90 <_IP2_Handler>
  24:	00000000 	nop
	...

00000030 <_IP3_Vector>:
  30:	1000001f 	b	b0 <_IP3_Handler>
  34:	00000000 	nop
	...

00000040 <_IP4_Vector>:
  40:	10000023 	b	d0 <_IP4_Handler>
  44:	00000000 	nop
	...

00000050 <_RESET_Handler>:
  50:	3c1d0001 	lui	sp,0x1
  54:	27bd8000 	addiu	sp,sp,-32768
  58:	3c1e0001 	lui	s8,0x1
  5c:	27de8000 	addiu	s8,s8,-32768
  60:	3c1c0000 	lui	gp,0x0
  64:	279c4000 	addiu	gp,gp,16384
  68:	41606020 	ei
  6c:	080001a8 	j	6a0 <_premain>

00000070 <_IP0_Handler>:
  70:	27bdffb8 	addiu	sp,sp,-72
  74:	afbf0000 	sw	ra,0(sp)
  78:	0c00003c 	jal	f0 <_save_regs>
  7c:	0c00007f 	jal	1fc <IP0_Handler>
  80:	0c00004e 	jal	138 <_restore_regs>
  84:	8fbf0000 	lw	ra,0(sp)
  88:	27bd0048 	addiu	sp,sp,72
  8c:	42000018 	eret

00000090 <_IP2_Handler>:
  90:	27bdffb8 	addiu	sp,sp,-72
  94:	afbf0000 	sw	ra,0(sp)
  98:	0c00003c 	jal	f0 <_save_regs>
  9c:	0c000088 	jal	220 <IP2_Handler>
  a0:	0c00004e 	jal	138 <_restore_regs>
  a4:	8fbf0000 	lw	ra,0(sp)
  a8:	27bd0048 	addiu	sp,sp,72
  ac:	42000018 	eret

000000b0 <_IP3_Handler>:
  b0:	27bdffb8 	addiu	sp,sp,-72
  b4:	afbf0000 	sw	ra,0(sp)
  b8:	0c00003c 	jal	f0 <_save_regs>
  bc:	0c000130 	jal	4c0 <IP3_Handler>
  c0:	0c00004e 	jal	138 <_restore_regs>
  c4:	8fbf0000 	lw	ra,0(sp)
  c8:	27bd0048 	addiu	sp,sp,72
  cc:	42000018 	eret

000000d0 <_IP4_Handler>:
  d0:	27bdffb8 	addiu	sp,sp,-72
  d4:	afbf0000 	sw	ra,0(sp)
  d8:	0c00003c 	jal	f0 <_save_regs>
  dc:	0c00009a 	jal	268 <IP4_Handler>
  e0:	0c00004e 	jal	138 <_restore_regs>
  e4:	8fbf0000 	lw	ra,0(sp)
  e8:	27bd0048 	addiu	sp,sp,72
  ec:	42000018 	eret

000000f0 <_save_regs>:
  f0:	afa10004 	sw	at,4(sp)
  f4:	afa20008 	sw	v0,8(sp)
  f8:	afa3000c 	sw	v1,12(sp)
  fc:	afa40010 	sw	a0,16(sp)
 100:	afa50014 	sw	a1,20(sp)
 104:	afa60018 	sw	a2,24(sp)
 108:	afa7001c 	sw	a3,28(sp)
 10c:	afa80020 	sw	t0,32(sp)
 110:	afa90024 	sw	t1,36(sp)
 114:	afaa0028 	sw	t2,40(sp)
 118:	afab002c 	sw	t3,44(sp)
 11c:	afac0030 	sw	t4,48(sp)
 120:	afad0034 	sw	t5,52(sp)
 124:	afae0038 	sw	t6,56(sp)
 128:	afaf003c 	sw	t7,60(sp)
 12c:	afb80040 	sw	t8,64(sp)
 130:	afb90044 	sw	t9,68(sp)
 134:	03e00008 	jr	ra

00000138 <_restore_regs>:
 138:	8fa10004 	lw	at,4(sp)
 13c:	8fa20008 	lw	v0,8(sp)
 140:	8fa3000c 	lw	v1,12(sp)
 144:	8fa40010 	lw	a0,16(sp)
 148:	8fa50014 	lw	a1,20(sp)
 14c:	8fa60018 	lw	a2,24(sp)
 150:	8fa7001c 	lw	a3,28(sp)
 154:	8fa80020 	lw	t0,32(sp)
 158:	8fa90024 	lw	t1,36(sp)
 15c:	8faa0028 	lw	t2,40(sp)
 160:	8fab002c 	lw	t3,44(sp)
 164:	8fac0030 	lw	t4,48(sp)
 168:	8fad0034 	lw	t5,52(sp)
 16c:	8fae0038 	lw	t6,56(sp)
 170:	8faf003c 	lw	t7,60(sp)
 174:	8fb80040 	lw	t8,64(sp)
 178:	8fb90044 	lw	t9,68(sp)
 17c:	03e00008 	jr	ra

00000180 <_ei>:
 180:	41626020 03e00008                        `bA....

00000188 <_di>:
 188:	41626000 03e00008                       .`bA....

00000190 <out32>:
#include <cpu.h>

void out32(uint32_t addr, uint32_t data)
{
 190:	27bdfff8 	addiu	sp,sp,-8
 194:	afbe0004 	sw	s8,4(sp)
 198:	03a0f025 	move	s8,sp
 19c:	afc40008 	sw	a0,8(s8)
 1a0:	afc5000c 	sw	a1,12(s8)
	*((volatile uint32_t*) addr) = data;
 1a4:	8fc20008 	lw	v0,8(s8)
 1a8:	8fc3000c 	lw	v1,12(s8)
 1ac:	00000000 	nop
 1b0:	ac430000 	sw	v1,0(v0)
}
 1b4:	00000000 	nop
 1b8:	03c0e825 	move	sp,s8
 1bc:	8fbe0004 	lw	s8,4(sp)
 1c0:	27bd0008 	addiu	sp,sp,8
 1c4:	03e00008 	jr	ra
 1c8:	00000000 	nop

000001cc <in32>:

uint32_t in32(uint32_t addr)
{
 1cc:	27bdfff8 	addiu	sp,sp,-8
 1d0:	afbe0004 	sw	s8,4(sp)
 1d4:	03a0f025 	move	s8,sp
 1d8:	afc40008 	sw	a0,8(s8)
	return *((volatile uint32_t*) addr);
 1dc:	8fc20008 	lw	v0,8(s8)
 1e0:	00000000 	nop
 1e4:	8c420000 	lw	v0,0(v0)
}
 1e8:	03c0e825 	move	sp,s8
 1ec:	8fbe0004 	lw	s8,4(sp)
 1f0:	27bd0008 	addiu	sp,sp,8
 1f4:	03e00008 	jr	ra
 1f8:	00000000 	nop

000001fc <IP0_Handler>:

void __attribute__ ((weak)) IP0_Handler()
{
 1fc:	27bdfff8 	addiu	sp,sp,-8
 200:	afbe0004 	sw	s8,4(sp)
 204:	03a0f025 	move	s8,sp
	return;
 208:	00000000 	nop
}
 20c:	03c0e825 	move	sp,s8
 210:	8fbe0004 	lw	s8,4(sp)
 214:	27bd0008 	addiu	sp,sp,8
 218:	03e00008 	jr	ra
 21c:	00000000 	nop

00000220 <IP2_Handler>:

void __attribute__ ((weak)) IP2_Handler()
{
 220:	27bdfff8 	addiu	sp,sp,-8
 224:	afbe0004 	sw	s8,4(sp)
 228:	03a0f025 	move	s8,sp
	return;
 22c:	00000000 	nop
}
 230:	03c0e825 	move	sp,s8
 234:	8fbe0004 	lw	s8,4(sp)
 238:	27bd0008 	addiu	sp,sp,8
 23c:	03e00008 	jr	ra
 240:	00000000 	nop

void __attribute__ ((weak)) IP3_Handler()
{
 244:	27bdfff8 	addiu	sp,sp,-8
 248:	afbe0004 	sw	s8,4(sp)
 24c:	03a0f025 	move	s8,sp
	return;
 250:	00000000 	nop
}
 254:	03c0e825 	move	sp,s8
 258:	8fbe0004 	lw	s8,4(sp)
 25c:	27bd0008 	addiu	sp,sp,8
 260:	03e00008 	jr	ra
 264:	00000000 	nop

00000268 <IP4_Handler>:

void __attribute__ ((weak)) IP4_Handler()
{
 268:	27bdfff8 	addiu	sp,sp,-8
 26c:	afbe0004 	sw	s8,4(sp)
 270:	03a0f025 	move	s8,sp
	return;
 274:	00000000 	nop
}
 278:	03c0e825 	move	sp,s8
 27c:	8fbe0004 	lw	s8,4(sp)
 280:	27bd0008 	addiu	sp,sp,8
 284:	03e00008 	jr	ra
 288:	00000000 	nop

0000028c <cpu_enable_interrupt>:

void cpu_enable_interrupt(uint32_t mask)
{
 28c:	27bdffe0 	addiu	sp,sp,-32
 290:	afbf001c 	sw	ra,28(sp)
 294:	afbe0018 	sw	s8,24(sp)
 298:	03a0f025 	move	s8,sp
 29c:	afc40020 	sw	a0,32(s8)
	uint32_t val = _mfc0(CP0_STATUS);
 2a0:	2404000c 	li	a0,12
 2a4:	0c0000d5 	jal	354 <_mfc0>
 2a8:	00000000 	nop
 2ac:	afc20010 	sw	v0,16(s8)
	_mtc0(CP0_STATUS, val | mask);
 2b0:	8fc30010 	lw	v1,16(s8)
 2b4:	8fc20020 	lw	v0,32(s8)
 2b8:	00000000 	nop
 2bc:	00621025 	or	v0,v1,v0
 2c0:	00402825 	move	a1,v0
 2c4:	2404000c 	li	a0,12
 2c8:	0c0000f8 	jal	3e0 <_mtc0>
 2cc:	00000000 	nop
}
 2d0:	00000000 	nop
 2d4:	03c0e825 	move	sp,s8
 2d8:	8fbf001c 	lw	ra,28(sp)
 2dc:	8fbe0018 	lw	s8,24(sp)
 2e0:	27bd0020 	addiu	sp,sp,32
 2e4:	03e00008 	jr	ra
 2e8:	00000000 	nop

000002ec <cpu_disable_interrupt>:

void cpu_disable_interrupt(uint32_t mask)
{
 2ec:	27bdffe0 	addiu	sp,sp,-32
 2f0:	afbf001c 	sw	ra,28(sp)
 2f4:	afbe0018 	sw	s8,24(sp)
 2f8:	03a0f025 	move	s8,sp
 2fc:	afc40020 	sw	a0,32(s8)
	uint32_t val = _mfc0(CP0_STATUS);
 300:	2404000c 	li	a0,12
 304:	0c0000d5 	jal	354 <_mfc0>
 308:	00000000 	nop
 30c:	afc20010 	sw	v0,16(s8)
	_mtc0(CP0_STATUS, val & ~mask);
 310:	8fc20020 	lw	v0,32(s8)
 314:	00000000 	nop
 318:	00021827 	nor	v1,zero,v0
 31c:	8fc20010 	lw	v0,16(s8)
 320:	00000000 	nop
 324:	00621024 	and	v0,v1,v0
 328:	00402825 	move	a1,v0
 32c:	2404000c 	li	a0,12
 330:	0c0000f8 	jal	3e0 <_mtc0>
 334:	00000000 	nop
}
 338:	00000000 	nop
 33c:	03c0e825 	move	sp,s8
 340:	8fbf001c 	lw	ra,28(sp)
 344:	8fbe0018 	lw	s8,24(sp)
 348:	27bd0020 	addiu	sp,sp,32
 34c:	03e00008 	jr	ra
 350:	00000000 	nop

00000354 <_mfc0>:

unsigned _mfc0(CP0_REG_t reg)
{
 354:	27bdfff0 	addiu	sp,sp,-16
 358:	afbe000c 	sw	s8,12(sp)
 35c:	03a0f025 	move	s8,sp
 360:	afc40010 	sw	a0,16(s8)
	uint32_t val = 0;
 364:	afc00000 	sw	zero,0(s8)

	switch(reg)
 368:	8fc20010 	lw	v0,16(s8)
 36c:	2403000d 	li	v1,13
 370:	1043000c 	beq	v0,v1,3a4 <_mfc0+0x50>
 374:	00000000 	nop
 378:	2403000e 	li	v1,14
 37c:	1043000e 	beq	v0,v1,3b8 <_mfc0+0x64>
 380:	00000000 	nop
 384:	2403000c 	li	v1,12
 388:	1443000f 	bne	v0,v1,3c8 <_mfc0+0x74>
 38c:	00000000 	nop
	{
	case CP0_STATUS:
		__asm__("mfc0 %0, $12"
 390:	40026000 	mfc0	v0,c0_status
 394:	00000000 	nop
 398:	afc20000 	sw	v0,0(s8)
				: "=r" (val)
				: /* no inputs */);
		break;
 39c:	1000000a 	b	3c8 <_mfc0+0x74>
 3a0:	00000000 	nop
	case CP0_CAUSE:
		__asm__("mfc0 %0, $13"
 3a4:	40026800 	mfc0	v0,c0_cause
 3a8:	00000000 	nop
 3ac:	afc20000 	sw	v0,0(s8)
				: "=r" (val)
				: /* no inputs */);
		break;
 3b0:	10000005 	b	3c8 <_mfc0+0x74>
 3b4:	00000000 	nop
	case CP0_EPC:
		__asm__("mfc0 %0, $14"
 3b8:	40027000 	mfc0	v0,c0_epc
 3bc:	00000000 	nop
 3c0:	afc20000 	sw	v0,0(s8)
				: "=r" (val)
				: /* no inputs */);
		break;
 3c4:	00000000 	nop
	}

	return val;
 3c8:	8fc20000 	lw	v0,0(s8)
}
 3cc:	03c0e825 	move	sp,s8
 3d0:	8fbe000c 	lw	s8,12(sp)
 3d4:	27bd0010 	addiu	sp,sp,16
 3d8:	03e00008 	jr	ra
 3dc:	00000000 	nop

000003e0 <_mtc0>:

void _mtc0(CP0_REG_t reg, uint32_t val)
{
 3e0:	27bdfff8 	addiu	sp,sp,-8
 3e4:	afbe0004 	sw	s8,4(sp)
 3e8:	03a0f025 	move	s8,sp
 3ec:	afc40008 	sw	a0,8(s8)
 3f0:	afc5000c 	sw	a1,12(s8)
	switch(reg)
 3f4:	8fc20008 	lw	v0,8(s8)
 3f8:	2403000d 	li	v1,13
 3fc:	1043000e 	beq	v0,v1,438 <_mtc0+0x58>
 400:	00000000 	nop
 404:	2403000e 	li	v1,14
 408:	10430010 	beq	v0,v1,44c <_mtc0+0x6c>
 40c:	00000000 	nop
 410:	2403000c 	li	v1,12
 414:	10430003 	beq	v0,v1,424 <_mtc0+0x44>
 418:	00000000 	nop
		__asm__("mtc0 %0, $14"
				: /* no outputs */
				: "r" (val));
		break;
	}
}
 41c:	1000000f 	b	45c <_mtc0+0x7c>
 420:	00000000 	nop
void _mtc0(CP0_REG_t reg, uint32_t val)
{
	switch(reg)
	{
	case CP0_STATUS:
		__asm__("mtc0 %0, $12"
 424:	8fc2000c 	lw	v0,12(s8)
 428:	00000000 	nop
 42c:	40826000 	mtc0	v0,c0_status
				: /* no outputs */
				: "r" (val));
		break;
 430:	1000000a 	b	45c <_mtc0+0x7c>
 434:	00000000 	nop
	case CP0_CAUSE:
		__asm__("mtc0 %0, $13"
 438:	8fc2000c 	lw	v0,12(s8)
 43c:	00000000 	nop
 440:	40826800 	mtc0	v0,c0_cause
				: /* no outputs */
				: "r" (val));
		break;
 444:	10000005 	b	45c <_mtc0+0x7c>
 448:	00000000 	nop
	case CP0_EPC:
		__asm__("mtc0 %0, $14"
 44c:	8fc2000c 	lw	v0,12(s8)
 450:	00000000 	nop
 454:	40827000 	mtc0	v0,c0_epc
	...
				: /* no outputs */
				: "r" (val));
		break;
	}
}
 460:	03c0e825 	move	sp,s8
 464:	8fbe0004 	lw	s8,4(sp)
 468:	27bd0008 	addiu	sp,sp,8
 46c:	03e00008 	jr	ra
 470:	00000000 	nop

00000474 <outbyte>:
void __attribute__ ((weak)) outbyte(int c)
{
 474:	27bdfff8 	addiu	sp,sp,-8
 478:	afbe0004 	sw	s8,4(sp)
 47c:	03a0f025 	move	s8,sp
 480:	afc40008 	sw	a0,8(s8)
	return;
 484:	00000000 	nop
}
 488:	03c0e825 	move	sp,s8
 48c:	8fbe0004 	lw	s8,4(sp)
 490:	27bd0008 	addiu	sp,sp,8
 494:	03e00008 	jr	ra
 498:	00000000 	nop

0000049c <inbyte>:

int __attribute__ ((weak)) inbyte()
{
 49c:	27bdfff8 	addiu	sp,sp,-8
 4a0:	afbe0004 	sw	s8,4(sp)
 4a4:	03a0f025 	move	s8,sp
	return -1;
 4a8:	2402ffff 	li	v0,-1
}
 4ac:	03c0e825 	move	sp,s8
 4b0:	8fbe0004 	lw	s8,4(sp)
 4b4:	27bd0008 	addiu	sp,sp,8
 4b8:	03e00008 	jr	ra
 4bc:	00000000 	nop

000004c0 <IP3_Handler>:
#include <timer.h>
#include <cpu.h>
#include <config.h>

void Timer_Handler()
{
 4c0:	27bdffe0 	addiu	sp,sp,-32
 4c4:	afbf001c 	sw	ra,28(sp)
 4c8:	afbe0018 	sw	s8,24(sp)
 4cc:	03a0f025 	move	s8,sp
	// LEDs an Pins 4-7 umschalten
	int led_old = in32(GPIO_BASE + GPIO_DATA);      // vorherigen Wert lesen
 4d0:	34048110 	li	a0,0x8110
 4d4:	0c000073 	jal	1cc <in32>
 4d8:	00000000 	nop
 4dc:	afc20010 	sw	v0,16(s8)
	int led_new = led_old  ^ (0xf << 4);            // Wert invertieren
 4e0:	8fc20010 	lw	v0,16(s8)
 4e4:	00000000 	nop
 4e8:	384200f0 	xori	v0,v0,0xf0
 4ec:	afc20014 	sw	v0,20(s8)
	out32(GPIO_BASE + GPIO_DATA, led_new);          // neuen Wert schreiben
 4f0:	8fc20014 	lw	v0,20(s8)
 4f4:	00000000 	nop
 4f8:	00402825 	move	a1,v0
 4fc:	34048110 	li	a0,0x8110
 500:	0c000064 	jal	190 <out32>
 504:	00000000 	nop

	// Timer-Interrupt quittieren
	in32(TIMER_BASE + TIMER_STATUS);
 508:	34048308 	li	a0,0x8308
 50c:	0c000073 	jal	1cc <in32>
 510:	00000000 	nop
}
 514:	00000000 	nop
 518:	03c0e825 	move	sp,s8
 51c:	8fbf001c 	lw	ra,28(sp)
 520:	8fbe0018 	lw	s8,24(sp)
 524:	27bd0020 	addiu	sp,sp,32
 528:	03e00008 	jr	ra
 52c:	00000000 	nop

00000530 <main>:

int main()
{
 530:	27bdffe0 	addiu	sp,sp,-32
 534:	afbf001c 	sw	ra,28(sp)
 538:	afbe0018 	sw	s8,24(sp)
 53c:	03a0f025 	move	s8,sp
	// Pins 4-7 als Ausgang konfigurieren
	out32(GPIO_BASE + GPIO_DIR_SET, (0xf << 4));
 540:	240500f0 	li	a1,240
 544:	34048104 	li	a0,0x8104
 548:	0c000064 	jal	190 <out32>
 54c:	00000000 	nop

	// Timer konfigurieren (1 Interrupt je 10 us)
	out32(TIMER_BASE + TIMER_START, SYSTEM_FREQUENCY * 5 - 1);
 550:	3c020ee6 	lui	v0,0xee6
 554:	3445b27f 	ori	a1,v0,0xb27f
 558:	34048304 	li	a0,0x8304
 55c:	0c000064 	jal	190 <out32>
 560:	00000000 	nop
	cpu_enable_interrupt(TIMER_INTR);
 564:	24040800 	li	a0,2048
 568:	0c0000a3 	jal	28c <cpu_enable_interrupt>
 56c:	00000000 	nop

	while(1){
		int a =5;
 570:	24020005 	li	v0,5
 574:	afc20010 	sw	v0,16(s8)
		a++;
 578:	8fc20010 	lw	v0,16(s8)
 57c:	00000000 	nop
 580:	24420001 	addiu	v0,v0,1
 584:	afc20010 	sw	v0,16(s8)
	}
 588:	1000fff9 	b	570 <main+0x40>
 58c:	00000000 	nop

00000590 <memcpy>:

#include <string.h>
#include <stddef.h> // Include for size_t definition

void *memcpy(void *dest, const void *src, size_t count)
{
 590:	27bdfff0 	addiu	sp,sp,-16
 594:	afbe000c 	sw	s8,12(sp)
 598:	03a0f025 	move	s8,sp
 59c:	afc40010 	sw	a0,16(s8)
 5a0:	afc50014 	sw	a1,20(s8)
 5a4:	afc60018 	sw	a2,24(s8)
	char *dst8 = (char *)dest;
 5a8:	8fc20010 	lw	v0,16(s8)
 5ac:	00000000 	nop
 5b0:	afc20000 	sw	v0,0(s8)
	char *src8 = (char *)src;
 5b4:	8fc20014 	lw	v0,20(s8)
 5b8:	00000000 	nop
 5bc:	afc20004 	sw	v0,4(s8)

	while (count--) {
 5c0:	1000000c 	b	5f4 <memcpy+0x64>
 5c4:	00000000 	nop
		*dst8++ = *src8++;
 5c8:	8fc20000 	lw	v0,0(s8)
 5cc:	00000000 	nop
 5d0:	24430001 	addiu	v1,v0,1
 5d4:	afc30000 	sw	v1,0(s8)
 5d8:	8fc30004 	lw	v1,4(s8)
 5dc:	00000000 	nop
 5e0:	24640001 	addiu	a0,v1,1
 5e4:	afc40004 	sw	a0,4(s8)
 5e8:	90630000 	lbu	v1,0(v1)
 5ec:	00000000 	nop
 5f0:	a0430000 	sb	v1,0(v0)
void *memcpy(void *dest, const void *src, size_t count)
{
	char *dst8 = (char *)dest;
	char *src8 = (char *)src;

	while (count--) {
 5f4:	8fc20018 	lw	v0,24(s8)
 5f8:	00000000 	nop
 5fc:	2443ffff 	addiu	v1,v0,-1
 600:	afc30018 	sw	v1,24(s8)
 604:	1440fff0 	bnez	v0,5c8 <memcpy+0x38>
 608:	00000000 	nop
		*dst8++ = *src8++;
	}
	return dest;
 60c:	8fc20010 	lw	v0,16(s8)
}
 610:	03c0e825 	move	sp,s8
 614:	8fbe000c 	lw	s8,12(sp)
 618:	27bd0010 	addiu	sp,sp,16
 61c:	03e00008 	jr	ra
 620:	00000000 	nop

00000624 <memset>:
#include <string.h>
#include <stddef.h> // Include for size_t definition

void *memset(void *dest, int c, size_t count)
{
 624:	27bdfff0 	addiu	sp,sp,-16
 628:	afbe000c 	sw	s8,12(sp)
 62c:	03a0f025 	move	s8,sp
 630:	afc40010 	sw	a0,16(s8)
 634:	afc50014 	sw	a1,20(s8)
 638:	afc60018 	sw	a2,24(s8)
	char *dst8 = (char *)dest;
 63c:	8fc20010 	lw	v0,16(s8)
 640:	00000000 	nop
 644:	afc20000 	sw	v0,0(s8)

	while (count--) {
 648:	10000009 	b	670 <memset+0x4c>
 64c:	00000000 	nop
		*dst8++ = c;
 650:	8fc20000 	lw	v0,0(s8)
 654:	00000000 	nop
 658:	24430001 	addiu	v1,v0,1
 65c:	afc30000 	sw	v1,0(s8)
 660:	8fc30014 	lw	v1,20(s8)
 664:	00000000 	nop
 668:	306300ff 	andi	v1,v1,0xff
 66c:	a0430000 	sb	v1,0(v0)

void *memset(void *dest, int c, size_t count)
{
	char *dst8 = (char *)dest;

	while (count--) {
 670:	8fc20018 	lw	v0,24(s8)
 674:	00000000 	nop
 678:	2443ffff 	addiu	v1,v0,-1
 67c:	afc30018 	sw	v1,24(s8)
 680:	1440fff3 	bnez	v0,650 <memset+0x2c>
 684:	00000000 	nop
		*dst8++ = c;
	}
	return dest;
 688:	8fc20010 	lw	v0,16(s8)
}
 68c:	03c0e825 	move	sp,s8
 690:	8fbe000c 	lw	s8,12(sp)
 694:	27bd0010 	addiu	sp,sp,16
 698:	03e00008 	jr	ra
 69c:	00000000 	nop

000006a0 <_premain>:
extern char _bss_end;

int main();

void _premain()
{
 6a0:	27bdffe8 	addiu	sp,sp,-24
 6a4:	afbf0014 	sw	ra,20(sp)
 6a8:	afbe0010 	sw	s8,16(sp)
 6ac:	03a0f025 	move	s8,sp
	/* move initialized data from ROM to RAM */
	if ((&_data_start) != (&_data_start_rom)) {
 6b0:	27830000 	addiu	v1,gp,0
 6b4:	2782c728 	addiu	v0,gp,-14552
 6b8:	10620009 	beq	v1,v0,6e0 <_premain+0x40>
 6bc:	00000000 	nop
		memcpy(&_data_start, &_data_start_rom, &_data_end - &_data_start);
 6c0:	27830000 	addiu	v1,gp,0
 6c4:	27820000 	addiu	v0,gp,0
 6c8:	00621023 	subu	v0,v1,v0
 6cc:	00403025 	move	a2,v0
 6d0:	2785c728 	addiu	a1,gp,-14552
 6d4:	27840000 	addiu	a0,gp,0
 6d8:	0c000164 	jal	590 <memcpy>
 6dc:	00000000 	nop
	}

	memset(&_bss_start, 0, &_bss_end - &_bss_start);
 6e0:	27830000 	addiu	v1,gp,0
 6e4:	27820000 	addiu	v0,gp,0
 6e8:	00621023 	subu	v0,v1,v0
 6ec:	00403025 	move	a2,v0
 6f0:	00002825 	move	a1,zero
 6f4:	27840000 	addiu	a0,gp,0
 6f8:	0c000189 	jal	624 <memset>
 6fc:	00000000 	nop

	main();
 700:	0c00014c 	jal	530 <main>
 704:	00000000 	nop
	while(1);
 708:	1000ffff 	b	708 <_premain+0x68>
 70c:	00000000 	nop
